Inheritance is one of the fundamental design principles in OOP. BUT relational databases don’t support inheritance 

JPA suggests different strategies to support inheritance hierarchies. 

Hibernate Inheritance strategies
1 Single Table Strategy
This is typically the best inheritance strategy. In this strategy, whole inheritance hierarchy’s data is stored in a single table. A discriminator column is used to determine to which class the row belongs.
Annoations used in super class
@Entity 
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "emp_type")
@Table(name = "employees")
public class Employee {....}

In sub class : 
@Entity
@DiscriminatorValue("worker")
public class Worker extends Employee {..}

2. Joined Table Strategy
This is the most logical solution, as it mirrors the object structure in the database. In this approach, a separate database table is defined for each of the class in the hierarchy and each table stores only its local attributes. Along with attribute, each table should have an id column and the id is defined in the parent table.

In super class 
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@DiscriminatorColumn(name = "emp_type")
@Table(name = "employees")
public class Employee {...}

In sub class 
@Entity
@DiscriminatorValue(value = "mgr")
@PrimaryKeyJoinColumn(name = "emp_id")
public class Manager extends Employee {....}